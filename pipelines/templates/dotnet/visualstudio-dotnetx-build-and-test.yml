parameters:
  - name: buildConfiguration
    type: string
    default: 'Release'

  - name: buildVersion
    type: string
    default: ''
 
  - name: solutionPath
    type: string
    default: ''

  - name: project
    type: string
    default: '*.csproj'

  - name: artifactName
    type: string
    default: 'drop'

  - name: resharperEnabled
    type: boolean
    default: true

  - name: buildQualityCheckEnabled
    type: boolean
    default: true

  - name: runUnitTests
    type: boolean
    default: true

  - name: runIntegrationTests
    type: boolean
    default: false
    
steps:
- task: NuGetToolInstaller@1
  condition: and(succeeded(), eq(variables['BuildAndTestCode'], 'true'))
    
- task: NuGetCommand@2
  inputs:
    restoreSolution: '${{ parameters.solutionPath }}'
  condition: and(succeeded(), eq(variables['BuildAndTestCode'], 'true'))
  
- task: VSBuild@1
  inputs:
    solution: '${{ parameters.solutionPath }}'
    msbuildArgs: '/p:Version="${{ parameters.buildVersion }}" /p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:PackageLocation="$(build.artifactstagingdirectory)/${{ parameters.artifactName }}"'
    #platform: '$(buildPlatform)'
    configuration: '${{ parameters.buildConfiguration }}'
  condition: and(succeeded(), eq(variables['BuildAndTestCode'], 'true'))

# disabled Visual Studio Resharper CLI as currently doesn't function very well since last update
# - task: ResharperCli@2 # see https://marketplace.visualstudio.com/items?itemName=alanwales.resharper-code-analysis
#   enabled: ${{ parameters.resharperEnabled }}
#   inputs:
#     solutionOrProjectPath: '${{ parameters.solutionPath }}'
#     failBuildLevelSelector: 'Warning'
#     failBuildOnCodeIssues: false
#     resultsOutputFilePath: '$(Build.ArtifactStagingDirectory)\CodeQualityResults.xml'

- task: DotNetCoreCLI@2
  displayName: 'Run unit tests with xplat code coverage'
  enabled: ${{ parameters.runUnitTests }}
  inputs:
    command: 'test'
    projects: '**/*Tests.csproj'
    arguments: '--no-build --configuration ${{ parameters.buildConfiguration }} --filter Category!=Integration --collect:"XPlat Code Coverage" /p:SkipAutoProps=true /p:CopyLocalLockFileAssemblies=true /p:Exclude=[Microsoft.*]* -- RunConfiguration.DisableAppDomain=true' # -verbosity:diagnostic 
    testRunTitle: 'Unit tests in all projects with xplat code coverage'
  condition: and(succeeded(), eq(variables['BuildAndTestCode'], 'true'))

- task: PowerShell@2
  displayName: Display files on agent after tests
  enabled: true
  condition: and(succeededOrFailed(), eq(variables['System.Debug'], true))
  inputs:
    targetType: 'inline'
    script: |  
      Write-Host "Pipeline workspace: $env:PIPELINE_WORKSPACE"
      Get-ChildItem -Path $env:PIPELINE_WORKSPACE -Recurse

- task: reportgenerator@5 # see https://marketplace.visualstudio.com/items?itemName=Palmmedia.reportgenerator
  enabled: ${{ parameters.runUnitTests }}
  inputs:
    reports: '$(Agent.TempDirectory)\**\coverage.cobertura.xml' # for coverlet.collector i.e xplat
    #reports: '$(Build.SourcesDirectory)/**/coverage.cobertura.xml' # for coverlet.msbuild
    targetdir: '$(Build.SourcesDirectory)\CoverageResults'
    reporttypes: 'HtmlInline_AzurePipelines;Cobertura'
    sourcedirs: '$(Build.SourcesDirectory)'
  condition: and(succeeded(), eq(variables['BuildAndTestCode'], 'true'))

- task: PowerShell@2
  displayName: Display files on agent after report generator
  enabled: true
  condition: and(succeededOrFailed(), eq(variables['System.Debug'], true))
  inputs:
    targetType: 'inline'
    script: |  
      Write-Host "Pipeline workspace: $env:PIPELINE_WORKSPACE"
      Get-ChildItem -Path $env:PIPELINE_WORKSPACE -Recurse

- task: PublishCodeCoverageResults@1
  enabled: ${{ parameters.runUnitTests }}
  displayName: 'Publish code coverage'
  inputs:
    codeCoverageTool: Cobertura
    pathToSources: '$(Build.SourcesDirectory)'
    summaryFileLocation: '$(Build.SourcesDirectory)\CoverageResults\Cobertura.xml'
    reportDirectory: '$(Build.SourcesDirectory)\CoverageResults'
    failIfCoverageEmpty: false
  condition: and(succeeded(), eq(variables['BuildAndTestCode'], 'true'))

- task: BuildQualityChecks@9
  displayName: 'Check build quality'
  enabled: ${{ parameters.buildQualityCheckEnabled }}
  condition: and(succeeded(), eq(variables['BuildAndTestCode'], 'true'))
  continueOnError: true # see https://github.com/MicrosoftPremier/VstsExtensions/blob/master/BuildQualityChecks/en-US/PullRequests.md#status-policy
  inputs:
    # ===== Warnings Policy Inputs =====
    # see https://github.com/MicrosoftPremier/VstsExtensions/blob/master/BuildQualityChecks/en-US/WarningsPolicy.md
    checkWarnings: true # Optional
    warningFailOption: build # Optional; Valid values: build, fixed
    #warningThreshold: '0' # Optional
    forceFewerWarnings: false # Optional
    allowWarningVariance: false # Optional
    #warningVariance: # Required if allowWarningVariance = true
    showStatistics: true # Optional
    evaluateTaskWarnings: true # Optional
    #warningTaskFilters: '/^((vs|ms)build|ant(\\s+.+)?|gradle(w)?(\\s+.+)?|grunt|gulp|maven(\\s+.+)?|xamarin(android|ios)|xcode(\\s+.+)?|cmake|build\\s+.+)$/i' # Optional
    #warningFilters: # Optional
    inclusiveFiltering: true # Optional
    #evaluateFileWarnings: false # Optional
    #warningFilesFolder: # Optional
    #warningFiles: # Required if evaluateFileWarnings = true
    #warningFileFilters: # Required if evaluateFileWarnings = true
    #warningFilesArtifact: # Required if evaluateFileWarnings = true and (warningFailOption = build or showStatistics = true)
    # ===== Code Coverage Policy Inputs =====
    # see https://github.com/MicrosoftPremier/VstsExtensions/blob/master/BuildQualityChecks/en-US/CodeCoveragePolicy.md
    checkCoverage: true # Optional
    coverageFailOption: build # Optional; Valid values: build, fixed
    coverageType: lines # Optional; Valid values: blocks, lines, branches, custom
    #customCoverageType: # Required if coverageType = custom
    #treat0of0as100: false # Optional
    #coverageThreshold: '60' # Optional
    #forceCoverageImprovement: false # Optional
    #coverageUpperThreshold: '80' # Optional
    #ignoreDecreaseAboveUpperThreshold: true # Optional
    #useUncoveredElements: false # Optional
    allowCoverageVariance: true # Optional
    coverageVariance: '2' # Required if allowCoverageVariance = true
    coverageDeltaType: percentage # Optional; Valid values: absolute, percentage
    #coveragePrecision: '4' # Optional
    #buildConfiguration: # Optional
    #buildPlatform: # Optional
    #explicitFilter: false # Optional
    # ===== Baseline Inputs =====
    # see https://github.com/MicrosoftPremier/VstsExtensions/blob/master/BuildQualityChecks/en-US/overview.md
    includePartiallySucceeded: true # Optional
    #baseDefinitionFilter: # Ignored - only used by UI editor
    #baseDefinitionId: # Optional
    #baseRepoId: # Ignored - only used by UI editor
    baseBranchRef: $(System.PullRequest.TargetBranch) # Optional
    # ===== Reporting Inputs =====
    #runTitle: # Optional
    #fileAnalysisTitle: # Optional
    # ===== Advanced Inputs =====
    #disableCertCheck: false # Optional
    #createBuildIssues: true # Optional